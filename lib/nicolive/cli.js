// Generated by CoffeeScript 1.11.1
var Command, chalk, cheerio, h2, readlineSync,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Command = (require('commander')).Command;

readlineSync = require('readline-sync');

cheerio = require('cheerio');

chalk = require('chalk');

h2 = chalk.underline.green;

module.exports = function(argv) {
  var cli, view;
  cli = new Command;
  cli.version(require('../../package').version).usage('<liveID> [comment] [options...]').option('-f, --from [number]', 'Get [0~1000] comment of past.', 0).option('-m, --mail [command]', 'Change [comment] command', '184').option('-v, --verbose', 'Output debug log.');
  cli.command('logout').description('Destroy session & Request to https://.../logout').action((function(_this) {
    return function() {
      return _this.logout(function() {
        console.log('Destroied session.');
        return process.exit(0);
      });
    };
  })(this));
  cli.parse(argv);
  if (cli.args.length === 0) {
    cli.help();
  }
  if (indexOf.call(cli.rawArgs, 'logout') >= 0) {
    return;
  }
  this.ping((function(_this) {
    return function(error) {
      var id, pw;
      if (error) {
        console.log('Please authorization.');
        id = readlineSync.question('email: ');
        pw = readlineSync.question('password: ', {
          noEchoBack: true
        });
        return _this.login(id, pw, function(error) {
          if (error != null) {
            return console.error(error);
          }
          console.log('Authorized.');
          return view();
        });
      } else {
        return view();
      }
    };
  })(this));
  return view = (function(_this) {
    return function() {
      return _this.view(cli.args[0], cli, function(error, viewer) {
        if (error != null) {
          return console.error(error);
        }
        viewer.on('handshaked', function() {
          if (cli.args[1]) {
            return _this.comment(cli.args[1], cli);
          }
        });
        return viewer.on('comment', function(comment) {
          var ref;
          return console.log(h2('Received', ((ref = comment.attr.no) != null ? ref : '-') + ':'), comment.text);
        });
      });
    };
  })(this);
};
