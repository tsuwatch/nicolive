// Generated by CoffeeScript 1.11.1
var chalk, cheerio, h1, request, url,
  slice = [].slice;

request = require('request');

cheerio = require('cheerio');

url = require('../api').url;

chalk = require('chalk');

h1 = chalk.underline.magenta;

module.exports = function() {
  var args, callback, i, live_id, options, ref;
  live_id = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), callback = arguments[i++];
  options = (ref = args[0]) != null ? ref : {};
  if (options.verbose) {
    console.log(h1('Request to'), url.getPlayerStatus + live_id);
  }
  return request({
    url: url.getPlayerStatus + live_id,
    headers: {
      Cookie: options.cookie ? options.cookie : this.get()
    }
  }, (function(_this) {
    return function(error, res, body) {
      var addr, description, errorMessage, mail, ms, open_time, playerStatus, port, premium, res_from, statuses, thread, title, user_id, version;
      errorMessage = cheerio(body).find('error code').text();
      if (error != null) {
        return callback(error, body);
      }
      if (errorMessage.length) {
        return callback(errorMessage, body);
      }
      playerStatus = cheerio(body);
      ms = playerStatus.find('ms');
      port = ms.find('port').eq(0).text();
      addr = ms.find('addr').eq(0).text();
      open_time = playerStatus.find('open_time').eq(0).text();
      title = playerStatus.find('title').eq(0).text();
      description = playerStatus.find('description').eq(0).text();
      thread = ms.find('thread').eq(0).text();
      version = '20061206';
      if (options.from != null) {
        res_from = -1 * options.from;
      }
      if (res_from == null) {
        res_from = 0;
      }
      user_id = playerStatus.find('user_id').eq(0).text();
      premium = playerStatus.find('is_premium').eq(0).text();
      mail = '184';
      statuses = {
        port: port,
        addr: addr,
        open_time: open_time,
        title: title,
        description: description,
        thread: thread,
        version: version,
        res_from: res_from,
        user_id: user_id,
        premium: premium,
        mail: mail
      };
      if (options.verbose) {
        console.log(h1('Player status'), statuses);
      }
      return callback(null, body, statuses);
    };
  })(this));
};
