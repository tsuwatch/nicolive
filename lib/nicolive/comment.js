// Generated by CoffeeScript 1.11.1
var chalk, cheerio, h1, querystring, ref, request, status, url,
  slice = [].slice;

request = require('request');

cheerio = require('cheerio');

ref = require('../api'), url = ref.url, status = ref.status;

querystring = require('querystring');

chalk = require('chalk');

h1 = chalk.underline.magenta;

module.exports = function() {
  var args, callback, chat, chatResult, chunks, i, options, ref1, text;
  text = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), callback = arguments[i++];
  options = (ref1 = args[0]) != null ? ref1 : {};
  if (typeof options === 'function') {
    callback = options;
  }
  if (typeof callback !== 'function') {
    callback = (function(error) {
      if (error) {
        throw error;
      }
    });
  }
  if (this.viewer == null) {
    return callback(new Error('Disconnected'));
  }
  chat = null;
  this.getPostKey(options, (function(_this) {
    return function(error, postkey) {
      var vpos;
      if (error != null) {
        return callback(error);
      }
      vpos = (Math.floor(Date.now() / 1000) - _this.playerStatus.open_time) * 100;
      chat = cheerio('<chat/>');
      chat.attr(JSON.parse(JSON.stringify(_this.attrs)));
      chat.attr({
        vpos: vpos
      });
      chat.attr({
        postkey: postkey
      });
      if (options.mail != null) {
        chat.attr('mail', options.mail);
      }
      chat.text(text.toString());
      _this.viewer.write(chat.toString() + '\0');
      if (options.verbose) {
        console.log(h1('Wrote'), chat.toString() + '\0');
      }
      return _this.viewer.on('data', chatResult);
    };
  })(this));
  chunks = '';
  return chatResult = (function(_this) {
    return function(buffer) {
      var chunk, code, data, description, error, ref2, statusValue;
      chunk = buffer.toString();
      chunks += chunk;
      if (!chunk.match(/\0$/)) {
        return;
      }
      if (options.verbose) {
        console.log(chunks);
      }
      data = cheerio('<data>' + chunks + '</data>');
      chunks = '';
      statusValue = data.find('chat_result').attr('status');
      if (statusValue.length) {
        if (options.verbose) {
          console.log(h1('Chat result'), statusValue);
        }
        _this.viewer.removeListener('data', chatResult);
        ref2 = status[statusValue], code = ref2.code, description = ref2.description;
        error = null;
        if (statusValue !== '0') {
          error = new Error('Status is ' + statusValue + ':' + code + ' ' + description + JSON.stringify(chat.attr(), null, 2));
        }
        return callback(error, data.find('chat_result'));
      }
    };
  })(this);
};
